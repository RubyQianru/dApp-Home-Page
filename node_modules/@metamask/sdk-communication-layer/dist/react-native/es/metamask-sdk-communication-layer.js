import e from"cross-fetch";import{Buffer as t}from"buffer";import{PrivateKey as n,encrypt as o,decrypt as i}from"eciesjs";import{EventEmitter2 as s}from"eventemitter2";import{validate as a,v4 as c}from"uuid";import{io as r}from"socket.io-client";function d(e,t,n,o){return new(n||(n=Promise))((function(i,s){function a(e){try{r(o.next(e))}catch(e){s(e)}}function c(e){try{r(o.throw(e))}catch(e){s(e)}}function r(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,c)}r((o=o.apply(e,t||[])).next())}))}"function"==typeof SuppressedError&&SuppressedError;const l=(t,n)=>d(void 0,void 0,void 0,(function*(){const o=n.endsWith("/")?`${n}debug`:`${n}/debug`,i=JSON.stringify(t),s=yield e(o,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:i});return yield s.text()}));class u{constructor(e){this.enabled=!0,this.debug=!1,(null==e?void 0:e.debug)&&(this.debug=e.debug),(null==e?void 0:e.pkey)?this.ecies=n.fromHex(e.pkey):this.ecies=new n,this.debug&&(console.info("[ECIES] initialized secret: ",this.ecies.toHex()),console.info("[ECIES] initialized public: ",this.ecies.publicKey.toHex()),console.info("[ECIES] init with",this))}generateECIES(){this.ecies=new n}getPublicKey(){return this.ecies.publicKey.toHex()}encrypt(e,n){let i=e;if(this.enabled)try{this.debug&&console.debug("ECIES::encrypt() using otherPublicKey",n);const s=t.from(e),a=o(n,s);i=t.from(a).toString("base64")}catch(t){throw this.debug&&(console.error("error encrypt:",t),console.error("private: ",this.ecies.toHex()),console.error("data: ",e),console.error("otherkey: ",n)),t}return i}decrypt(e){let n=e;if(this.enabled)try{this.debug&&console.debug("ECIES::decrypt() using privateKey",this.ecies.toHex());const o=t.from(e.toString(),"base64");n=i(this.ecies.toHex(),o).toString()}catch(t){throw this.debug&&(console.error("error decrypt",t),console.error("private: ",this.ecies.toHex()),console.error("encryptedData: ",e)),t}return n}getKeyInfo(){return{private:this.ecies.toHex(),public:this.ecies.publicKey.toHex()}}toString(){console.debug("ECIES::toString()",this.getKeyInfo())}}var g={name:"@metamask/sdk-communication-layer",version:"0.12.0",description:"",homepage:"https://github.com/MetaMask/metamask-sdk#readme",bugs:{url:"https://github.com/MetaMask/metamask-sdk/issues"},repository:{type:"git",url:"https://github.com/MetaMask/metamask-sdk.git",directory:"packages/sdk-communication-layer"},main:"dist/node/cjs/metamask-sdk-communication-layer.js",unpkg:"dist/browser/umd/metamask-sdk-communication-layer.js",module:"dist/node/es/metamask-sdk-communication-layer.js",browser:"dist/browser/es/metamask-sdk-communication-layer.js","react-native":"dist/react-native/es/metamask-sdk-communication-layer.js",types:"dist/browser/es/src/index.d.ts",files:["/dist"],scripts:{build:"rimraf dist && rollup -c --bundleConfigAsCjs","build:dev":"rimraf dist && NODE_ENV=dev rollup -c --bundleConfigAsCjs","build:post-tsc":"echo 'N/A'","build:pre-tsc":"echo 'N/A'",clean:"rimraf ./dist",lint:"yarn lint:eslint && yarn lint:misc --check","lint:changelog":"../../scripts/validate-changelog.sh @metamask/sdk-communication-layer","lint:eslint":"eslint . --cache --ext js,ts","lint:fix":"yarn lint:eslint --fix && yarn lint:misc --write","lint:misc":"prettier '**/*.json' '**/*.md' '!CHANGELOG.md' --ignore-path ../../.gitignore","prepare-manifest:preview":"../../scripts/prepare-preview-manifest.sh","publish:preview":"yarn npm publish --tag preview",prepack:"../../scripts/prepack.sh",reset:"yarn clean && rimraf ./node_modules/",test:"jest","test:coverage":"jest --coverage","test:ci":"jest --coverage --passWithNoTests","test:dev":"jest",watch:"rollup -c -w"},dependencies:{"cross-fetch":"^3.1.5","date-fns":"^2.29.3",eciesjs:"^0.3.16",eventemitter2:"^6.4.5","socket.io-client":"^4.5.1",uuid:"^8.3.2"},devDependencies:{"@jest/globals":"^29.3.1","@lavamoat/allow-scripts":"^2.3.1","@metamask/auto-changelog":"3.1.0","@metamask/eslint-config":"^6.0.0","@metamask/eslint-config-nodejs":"^6.0.0","@metamask/eslint-config-typescript":"^6.0.0","@rollup/plugin-commonjs":"^25.0.0","@rollup/plugin-json":"^6.0.0","@rollup/plugin-node-resolve":"^15.0.2","@rollup/plugin-terser":"^0.4.1","@types/jest":"^29.2.4","@types/node":"^20.1.3","@types/uuid":"^9.0.0","@typescript-eslint/eslint-plugin":"^4.26.0","@typescript-eslint/parser":"^4.26.0",eslint:"^7.30.0","eslint-config-prettier":"^8.3.0","eslint-plugin-import":"^2.23.4","eslint-plugin-jest":"^24.4.0","eslint-plugin-jsdoc":"^36.1.0","eslint-plugin-node":"^11.1.0","eslint-plugin-prettier":"^3.4.0",jest:"^29.3.1",prettier:"^2.3.0",rimraf:"^3.0.2",rollup:"^3.21.7","rollup-plugin-jscc":"^2.0.0","rollup-plugin-natives":"^0.7.5","rollup-plugin-node-builtins":"^2.1.2","rollup-plugin-node-globals":"^1.4.0","rollup-plugin-typescript2":"^0.31.2","rollup-plugin-visualizer":"^5.9.2","ts-jest":"^29.0.3","ts-node":"^10.9.1",typescript:"^4.3.2"},publishConfig:{access:"public",registry:"https://registry.npmjs.org/"},lavamoat:{allowScripts:{"@lavamoat/preinstall-always-fail":!1,canvas:!0,"eciesjs>secp256k1":!1,"socket.io-client>engine.io-client>ws>bufferutil":!1,"socket.io-client>engine.io-client>ws>utf-8-validate":!1}}};const h="https://metamask-sdk-socket.metafi.codefi.network/",m=["polling","websocket"],E=6048e5,v={METAMASK_GETPROVIDERSTATE:"metamask_getProviderState",ETH_REQUESTACCOUNTS:"eth_requestAccounts"};function y(e){const{debug:t,context:n}=e;t&&console.debug(`RemoteCommunication::${n}::clean()`),e.channelConfig=void 0,e.ready=!1,e.originatorConnectStarted=!1}var p,S,C,k,b;!function(e){e.DISCONNECTED="disconnected",e.WAITING="waiting",e.TIMEOUT="timeout",e.LINKED="linked",e.PAUSED="paused",e.TERMINATED="terminated"}(p||(p={})),function(e){e.KEY_INFO="key_info",e.SERVICE_STATUS="service_status",e.PROVIDER_UPDATE="provider_update",e.RPC_UPDATE="rpc_update",e.KEYS_EXCHANGED="keys_exchanged",e.JOIN_CHANNEL="join_channel",e.CHANNEL_CREATED="channel_created",e.CLIENTS_CONNECTED="clients_connected",e.CLIENTS_DISCONNECTED="clients_disconnected",e.CLIENTS_WAITING="clients_waiting",e.CLIENTS_READY="clients_ready",e.SOCKET_DISCONNECTED="socket_disconnected",e.SOCKET_RECONNECT="socket_reconnect",e.OTP="otp",e.SDK_RPC_CALL="sdk_rpc_call",e.AUTHORIZED="authorized",e.CONNECTION_STATUS="connection_status",e.MESSAGE="message",e.TERMINATE="terminate"}(S||(S={})),function(e){e.KEY_EXCHANGE="key_exchange"}(C||(C={})),function(e){e.KEY_HANDSHAKE_START="key_handshake_start",e.KEY_HANDSHAKE_CHECK="key_handshake_check",e.KEY_HANDSHAKE_SYN="key_handshake_SYN",e.KEY_HANDSHAKE_SYNACK="key_handshake_SYNACK",e.KEY_HANDSHAKE_ACK="key_handshake_ACK",e.KEY_HANDSHAKE_NONE="none"}(k||(k={}));class f extends s{constructor({communicationLayer:e,otherPublicKey:t,context:n,ecies:o,logging:i}){super(),this.keysExchanged=!1,this.step=k.KEY_HANDSHAKE_NONE,this.debug=!1,this.context=n,this.myECIES=new u(Object.assign(Object.assign({},o),{debug:null==i?void 0:i.eciesLayer})),this.communicationLayer=e,this.myPublicKey=this.myECIES.getPublicKey(),this.debug=!0===(null==i?void 0:i.keyExchangeLayer),t&&this.setOtherPublicKey(t),this.communicationLayer.on(C.KEY_EXCHANGE,this.onKeyExchangeMessage.bind(this))}onKeyExchangeMessage(e){this.debug&&console.debug(`KeyExchange::${this.context}::onKeyExchangeMessage() keysExchanged=${this.keysExchanged}`,e);const{message:t}=e;this.keysExchanged&&this.debug&&console.log(`KeyExchange::${this.context}::onKeyExchangeMessage received handshake while already exchanged. step=${this.step} otherPubKey=${this.otherPublicKey}`),t.type===k.KEY_HANDSHAKE_SYN?(this.checkStep([k.KEY_HANDSHAKE_NONE,k.KEY_HANDSHAKE_ACK]),this.debug&&console.debug("KeyExchange::KEY_HANDSHAKE_SYN",t),t.pubkey&&this.setOtherPublicKey(t.pubkey),this.communicationLayer.sendMessage({type:k.KEY_HANDSHAKE_SYNACK,pubkey:this.myPublicKey}),this.step=k.KEY_HANDSHAKE_ACK,this.emit(S.KEY_INFO,this.step)):t.type===k.KEY_HANDSHAKE_SYNACK?(this.checkStep([k.KEY_HANDSHAKE_SYNACK,k.KEY_HANDSHAKE_NONE]),this.debug&&console.debug("KeyExchange::KEY_HANDSHAKE_SYNACK"),t.pubkey&&this.setOtherPublicKey(t.pubkey),this.communicationLayer.sendMessage({type:k.KEY_HANDSHAKE_ACK}),this.keysExchanged=!0,this.step=k.KEY_HANDSHAKE_NONE,this.emit(S.KEYS_EXCHANGED)):t.type===k.KEY_HANDSHAKE_ACK&&(this.debug&&console.debug("KeyExchange::KEY_HANDSHAKE_ACK set keysExchanged to true!"),this.checkStep([k.KEY_HANDSHAKE_ACK,k.KEY_HANDSHAKE_NONE]),this.keysExchanged=!0,this.step=k.KEY_HANDSHAKE_NONE,this.emit(S.KEYS_EXCHANGED))}resetKeys(e){this.clean(),this.myECIES=new u(e)}clean(){this.debug&&console.debug(`KeyExchange::${this.context}::clean reset handshake state`),this.step=k.KEY_HANDSHAKE_NONE,this.emit(S.KEY_INFO,this.step),this.keysExchanged=!1}start({isOriginator:e,force:t}){this.debug&&console.debug(`KeyExchange::${this.context}::start isOriginator=${e} step=${this.step} force=${t} keysExchanged=${this.keysExchanged}`),e?!this.keysExchanged&&this.step===k.KEY_HANDSHAKE_NONE||t?(this.debug&&console.debug(`KeyExchange::${this.context}::start -- start key exchange (force=${t}) -- step=${this.step}`,this.step),this.clean(),this.step=k.KEY_HANDSHAKE_SYNACK,this.emit(S.KEY_INFO,this.step),this.communicationLayer.sendMessage({type:k.KEY_HANDSHAKE_SYN,pubkey:this.myPublicKey})):this.debug&&console.debug(`KeyExchange::${this.context}::start -- key exchange already ${this.keysExchanged?"done":"in progress"} -- aborted.`,this.step):this.keysExchanged&&!0!==t?this.debug&&console.debug("KeyExchange::start don't send KEY_HANDSHAKE_START -- exchange already done."):(this.communicationLayer.sendMessage({type:k.KEY_HANDSHAKE_START}),this.clean())}checkStep(e){if(e.length>0&&-1===e.indexOf(this.step.toString()))throw new Error(`Wrong Step "${this.step}" not within ${e}`)}setKeysExchanged(e){this.keysExchanged=e}areKeysExchanged(){return this.keysExchanged}getMyPublicKey(){return this.myPublicKey}getOtherPublicKey(){return this.otherPublicKey}setOtherPublicKey(e){this.debug&&console.debug("KeyExchange::setOtherPubKey()",e),this.otherPublicKey=e}encryptMessage(e){if(!this.otherPublicKey)throw new Error("encryptMessage: Keys not exchanged - missing otherPubKey");return this.myECIES.encrypt(e,this.otherPublicKey)}decryptMessage(e){if(!this.otherPublicKey)throw new Error("decryptMessage: Keys not exchanged - missing otherPubKey");return this.myECIES.decrypt(e)}getKeyInfo(){return{ecies:Object.assign(Object.assign({},this.myECIES.getKeyInfo()),{otherPubKey:this.otherPublicKey}),step:this.step,keysExchanged:this.areKeysExchanged()}}toString(){const e={keyInfo:this.getKeyInfo(),keysExchanged:this.keysExchanged,step:this.step};return JSON.stringify(e)}}!function(e){e.TERMINATE="terminate",e.ANSWER="answer",e.OFFER="offer",e.CANDIDATE="candidate",e.JSONRPC="jsonrpc",e.WALLET_INFO="wallet_info",e.ORIGINATOR_INFO="originator_info",e.PAUSE="pause",e.OTP="otp",e.AUTHORIZED="authorized",e.PING="ping",e.READY="ready"}(b||(b={}));const I=e=>new Promise((t=>{setTimeout(t,e)})),_=(e,t,n=200)=>d(void 0,void 0,void 0,(function*(){let o;const i=Date.now();let s=!1;for(;!s;){if(s=Date.now()-i>3e5,o=t[e],void 0!==o.elapsedTime)return o;yield I(n)}throw new Error(`RPC ${e} timed out`)})),K=e=>d(void 0,void 0,void 0,(function*(){var t,n,o,i,s;return e.state.debug&&console.debug(`SocketService::connectAgain instance.state.socket?.connected=${null===(t=e.state.socket)||void 0===t?void 0:t.connected} trying to reconnect after socketio disconnection`,e),yield I(200),(null===(n=e.state.socket)||void 0===n?void 0:n.connected)||(e.state.resumed=!0,null===(o=e.state.socket)||void 0===o||o.connect(),e.emit(S.SOCKET_RECONNECT),null===(i=e.state.socket)||void 0===i||i.emit(S.JOIN_CHANNEL,e.state.channelId,`${e.state.context}connect_again`)),yield I(100),null===(s=e.state.socket)||void 0===s?void 0:s.connected}));function x(e){return t=>{e.state.debug&&console.debug(`SocketService::on 'disconnect' manualDisconnect=${e.state.manualDisconnect}`,t),e.state.manualDisconnect||(e.emit(S.SOCKET_DISCONNECTED),function(e){"undefined"!=typeof window&&"undefined"!=typeof document&&(e.state.debug&&console.debug(`SocketService::checkFocus hasFocus=${document.hasFocus()}`,e),document.hasFocus()?K(e).then((t=>{e.state.debug&&console.debug(`SocketService::checkFocus reconnectSocket success=${t}`,e)})).catch((e=>{console.error("SocketService::checkFocus Error reconnecting socket",e)})):window.addEventListener("focus",(()=>{K(e).catch((e=>{console.error("SocketService::checkFocus Error reconnecting socket",e)}))}),{once:!0}))}(e))}}const N=[{event:"clients_connected",handler:function(e,t){return n=>d(this,void 0,void 0,(function*(){var n,o,i,s,a,c,r,d;e.state.debug&&console.debug(`SocketService::${e.state.context}::setupChannelListener::on 'clients_connected-${t}'  resumed=${e.state.resumed}  clientsPaused=${e.state.clientsPaused} keysExchanged=${null===(n=e.state.keyExchange)||void 0===n?void 0:n.areKeysExchanged()} isOriginator=${e.state.isOriginator}`),e.emit(S.CLIENTS_CONNECTED,{isOriginator:e.state.isOriginator,keysExchanged:null===(o=e.state.keyExchange)||void 0===o?void 0:o.areKeysExchanged(),context:e.state.context}),e.state.resumed?(e.state.isOriginator||(e.state.debug&&console.debug(`SocketService::${e.state.context}::on 'clients_connected' / keysExchanged=${null===(i=e.state.keyExchange)||void 0===i?void 0:i.areKeysExchanged()} -- backward compatibility`),null===(s=e.state.keyExchange)||void 0===s||s.start({isOriginator:null!==(a=e.state.isOriginator)&&void 0!==a&&a})),e.state.resumed=!1):e.state.clientsPaused?console.debug("SocketService::on 'clients_connected' skip sending originatorInfo on pause"):e.state.isOriginator||(e.state.debug&&console.debug(`SocketService::${e.state.context}::on 'clients_connected' / keysExchanged=${null===(c=e.state.keyExchange)||void 0===c?void 0:c.areKeysExchanged()} -- backward compatibility`),null===(r=e.state.keyExchange)||void 0===r||r.start({isOriginator:null!==(d=e.state.isOriginator)&&void 0!==d&&d,force:!0})),e.state.clientsConnected=!0,e.state.clientsPaused=!1}))}},{event:"channel_created",handler:function(e,t){return n=>{e.state.debug&&console.debug(`SocketService::${e.state.context}::setupChannelListener::on 'channel_created-${t}'`,n),e.emit(S.CHANNEL_CREATED,n)}}},{event:"clients_disconnected",handler:function(e,t){return()=>{var n;e.state.clientsConnected=!1,e.state.debug&&console.debug(`SocketService::${e.state.context}::setupChannelListener::on 'clients_disconnected-${t}'`),e.state.isOriginator&&!e.state.clientsPaused&&(null===(n=e.state.keyExchange)||void 0===n||n.clean()),e.emit(S.CLIENTS_DISCONNECTED,t)}}},{event:"message",handler:function(e,t){return({id:n,message:o,error:i})=>{var s,a,c,r,d,l,u,g,h,m,E,v,y,p,f;if(e.state.debug&&console.debug(`SocketService::${e.state.context}::on 'message' ${t} keysExchanged=${null===(s=e.state.keyExchange)||void 0===s?void 0:s.areKeysExchanged()}`,o),i)throw e.state.debug&&console.debug(`\n      SocketService::${e.state.context}::on 'message' error=${i}`),new Error(i);try{!function(e,t){if(t!==e.channelId)throw e.debug&&console.error(`Wrong id ${t} - should be ${e.channelId}`),new Error("Wrong id")}(e.state,n)}catch(e){return void console.error("ignore message --- wrong id ",o)}if(e.state.isOriginator&&(null==o?void 0:o.type)===k.KEY_HANDSHAKE_START)return e.state.debug&&console.debug(`SocketService::${e.state.context}::on 'message' received HANDSHAKE_START isOriginator=${e.state.isOriginator}`,o),void(null===(a=e.state.keyExchange)||void 0===a||a.start({isOriginator:null!==(c=e.state.isOriginator)&&void 0!==c&&c,force:!0}));if((null==o?void 0:o.type)===b.PING)return e.state.debug&&console.debug(`SocketService::${e.state.context}::on 'message' ping `),void e.emit(S.MESSAGE,{message:{type:"ping"}});if(e.state.debug&&console.debug(`SocketService::${e.state.context}::on 'message' originator=${e.state.isOriginator}, type=${null==o?void 0:o.type}, keysExchanged=${null===(r=e.state.keyExchange)||void 0===r?void 0:r.areKeysExchanged()}`),null===(d=null==o?void 0:o.type)||void 0===d?void 0:d.startsWith("key_handshake"))return e.state.debug&&console.debug(`SocketService::${e.state.context}::on 'message' emit KEY_EXCHANGE`,o),void e.emit(C.KEY_EXCHANGE,{message:o,context:e.state.context});if(null===(l=e.state.keyExchange)||void 0===l?void 0:l.areKeysExchanged()){if(-1!==o.toString().indexOf("type"))return console.warn("SocketService::on 'message' received non encrypted unkwown message"),void e.emit(S.MESSAGE,o)}else{let t=!1;try{null===(u=e.state.keyExchange)||void 0===u||u.decryptMessage(o),t=!0}catch(e){}if(!t)return e.state.isOriginator?null===(h=e.state.keyExchange)||void 0===h||h.start({isOriginator:null!==(m=e.state.isOriginator)&&void 0!==m&&m}):e.sendMessage({type:k.KEY_HANDSHAKE_START}),void console.warn(`Message ignored because invalid key exchange status. step=${null===(E=e.state.keyExchange)||void 0===E?void 0:E.getKeyInfo().step}`,null===(v=e.state.keyExchange)||void 0===v?void 0:v.getKeyInfo(),o);console.warn("Invalid key exchange status detected --- updating it."),null===(g=e.state.keyExchange)||void 0===g||g.setKeysExchanged(!0)}const I=null===(y=e.state.keyExchange)||void 0===y?void 0:y.decryptMessage(o),_=JSON.parse(null!=I?I:"{}");if((null==_?void 0:_.type)===b.PAUSE?e.state.clientsPaused=!0:e.state.clientsPaused=!1,e.state.isOriginator&&_.data){const t=_.data,n=e.state.rpcMethodTracker[t.id];if(n){const o=Date.now()-n.timestamp;e.state.debug&&console.debug(`SocketService::${e.state.context}::on 'message' received answer for id=${t.id} method=${n.method} responseTime=${o}`,_);const i=Object.assign(Object.assign({},n),{result:t.result,error:t.error?{code:null===(p=t.error)||void 0===p?void 0:p.code,message:null===(f=t.error)||void 0===f?void 0:f.message}:void 0,elapsedTime:o});e.state.rpcMethodTracker[t.id]=i,e.emit(S.RPC_UPDATE),e.state.debug&&console.debug("HACK (wallet <7.3) update rpcMethodTracker",i),e.emit(S.AUTHORIZED)}}e.emit(S.MESSAGE,{message:_})}}},{event:"clients_waiting_to_join",handler:function(e,t){return n=>{e.state.debug&&console.debug(`SocketService::${e.state.context}::setupChannelListener::on 'clients_waiting_to_join-${t}'`,n),e.emit(S.CLIENTS_WAITING,n)}}}],A=[{event:S.KEY_INFO,handler:function(e){return t=>{e.state.debug&&console.debug("SocketService::on 'KEY_INFO'",t),e.emit(S.KEY_INFO,t)}}},{event:S.KEYS_EXCHANGED,handler:function(e){return()=>{var t,n;e.state.debug&&console.debug(`SocketService::on 'keys_exchanged' keyschanged=${null===(t=e.state.keyExchange)||void 0===t?void 0:t.areKeysExchanged()}`),e.emit(S.KEYS_EXCHANGED,{keysExchanged:null===(n=e.state.keyExchange)||void 0===n?void 0:n.areKeysExchanged(),isOriginator:e.state.isOriginator});const o={keyInfo:e.getKeyInfo()};e.emit(S.SERVICE_STATUS,o)}}}];function O(e,t){e.state.debug&&console.debug(`SocketService::${e.state.context}::setupChannelListener setting socket listeners for channel ${t}...`);const{socket:n}=e.state,{keyExchange:o}=e.state;e.state.setupChannelListeners&&console.warn(`SocketService::${e.state.context}::setupChannelListener socket listeners already set up for channel ${t}`),n&&e.state.isOriginator&&(e.state.debug&&(null==n||n.io.on("error",(t=>{console.debug(`SocketService::${e.state.context}::setupChannelListener socket event=error`,t)})),null==n||n.io.on("reconnect",(t=>{console.debug(`SocketService::${e.state.context}::setupChannelListener socket event=reconnect`,t)})),null==n||n.io.on("reconnect_error",(t=>{console.debug(`SocketService::${e.state.context}::setupChannelListener socket event=reconnect_error`,t)})),null==n||n.io.on("reconnect_failed",(()=>{console.debug(`SocketService::${e.state.context}::setupChannelListener socket event=reconnect_failed`)})),null==n||n.io.on("ping",(()=>{console.debug(`SocketService::${e.state.context}::setupChannelListener socket event=ping`)}))),null==n||n.on("disconnect",(t=>(console.log(`MetaMaskSDK socket disconnected '${t}' begin recovery...`),x(e)(t))))),N.forEach((({event:o,handler:i})=>{const s=`${o}-${t}`;null==n||n.on(s,i(e,t))})),A.forEach((({event:t,handler:n})=>{null==o||o.on(t,n(e))})),e.state.setupChannelListeners=!0}function T(e,t){var n,o;if(!e.state.channelId)throw new Error("Create a channel first");e.state.debug&&console.debug(`SocketService::${e.state.context}::sendMessage() areKeysExchanged=${null===(n=e.state.keyExchange)||void 0===n?void 0:n.areKeysExchanged()}`,t);(null===(o=null==t?void 0:t.type)||void 0===o?void 0:o.startsWith("key_handshake"))?function(e,t){var n;e.state.debug&&console.debug(`SocketService::${e.state.context}::sendMessage()`,t),null===(n=e.state.socket)||void 0===n||n.emit(S.MESSAGE,{id:e.state.channelId,context:e.state.context,message:t})}(e,t):(!function(e,t){var n;if(!(null===(n=e.state.keyExchange)||void 0===n?void 0:n.areKeysExchanged()))throw e.state.debug&&console.debug(`SocketService::${e.state.context}::sendMessage() ERROR keys not exchanged`,t),new Error("Keys not exchanged BBB")}(e,t),function(e,t){var n;const o=null!==(n=null==t?void 0:t.method)&&void 0!==n?n:"",i=null==t?void 0:t.id;e.state.isOriginator&&i&&(e.state.rpcMethodTracker[i]={timestamp:Date.now(),method:o},e.emit(S.RPC_UPDATE))}(e,t),function(e,t){var n,o;const i=null===(n=e.state.keyExchange)||void 0===n?void 0:n.encryptMessage(JSON.stringify(t)),s={id:e.state.channelId,context:e.state.context,message:i,plaintext:e.state.hasPlaintext?JSON.stringify(t):void 0};e.state.debug&&console.debug(`SocketService::${e.state.context}::sendMessage()`,s),t.type===b.TERMINATE&&(e.state.manualDisconnect=!0),null===(o=e.state.socket)||void 0===o||o.emit(S.MESSAGE,s)}(e,t),function(e,t){var n;return d(this,void 0,void 0,(function*(){const o=null==t?void 0:t.id,i=null!==(n=null==t?void 0:t.method)&&void 0!==n?n:"";if(e.state.isOriginator&&o)try{const n=yield _(o,e.state.rpcMethodTracker,200);e.state.debug&&console.debug(`SocketService::waitForRpc id=${t.id} ${i} ( ${n.elapsedTime} ms)`,n.result)}catch(e){console.warn(`Error rpcId=${t.id} ${i}`,e)}}))}(e,t).catch((e=>{console.warn("Error handleRpcReplies",e)})))}class D extends s{constructor({otherPublicKey:e,reconnect:t,communicationLayerPreference:n,transports:o,communicationServerUrl:i,context:s,ecies:a,logging:c}){super(),this.state={clientsConnected:!1,clientsPaused:!1,manualDisconnect:!1,rpcMethodTracker:{},hasPlaintext:!1,communicationServerUrl:""},this.state.resumed=t,this.state.context=s,this.state.communicationLayerPreference=n,this.state.debug=!0===(null==c?void 0:c.serviceLayer),this.state.communicationServerUrl=i,this.state.hasPlaintext=this.state.communicationServerUrl!==h&&!0===(null==c?void 0:c.plaintext);const d={autoConnect:!1,transports:m};o&&(d.transports=o),this.state.debug&&console.debug(`SocketService::constructor() Socket IO url: ${this.state.communicationServerUrl}`),this.state.socket=r(i,d);const l={communicationLayer:this,otherPublicKey:e,sendPublicKey:!1,context:this.state.context,ecies:a,logging:c};this.state.keyExchange=new f(l)}resetKeys(){return(e=this).state.debug&&console.debug("SocketService::resetKeys()"),void(null===(t=e.state.keyExchange)||void 0===t||t.resetKeys());var e,t}createChannel(){return function(e){var t,n,o,i;e.state.debug&&console.debug(`SocketService::${e.state.context}::createChannel()`),(null===(t=e.state.socket)||void 0===t?void 0:t.connected)||null===(n=e.state.socket)||void 0===n||n.connect(),e.state.manualDisconnect=!1,e.state.isOriginator=!0;const s=c();return e.state.channelId=s,O(e,s),null===(o=e.state.socket)||void 0===o||o.emit(S.JOIN_CHANNEL,s,`${e.state.context}createChannel`),{channelId:s,pubKey:(null===(i=e.state.keyExchange)||void 0===i?void 0:i.getMyPublicKey())||""}}(this)}connectToChannel({channelId:e,isOriginator:t=!1,withKeyExchange:n=!1}){return function({options:e,instance:t}){var n,o,i,s;const{channelId:a,withKeyExchange:c,isOriginator:r}=e;if(t.state.debug&&console.debug(`SocketService::${t.state.context}::connectToChannel() channelId=${a} isOriginator=${r}`,null===(n=t.state.keyExchange)||void 0===n?void 0:n.toString()),null===(o=t.state.socket)||void 0===o?void 0:o.connected)throw new Error("socket already connected");t.state.manualDisconnect=!1,null===(i=t.state.socket)||void 0===i||i.connect(),t.state.withKeyExchange=c,t.state.isOriginator=r,t.state.channelId=a,O(t,a),null===(s=t.state.socket)||void 0===s||s.emit(S.JOIN_CHANNEL,a,`${t.state.context}_connectToChannel`)}({options:{channelId:e,isOriginator:t,withKeyExchange:n},instance:this})}getKeyInfo(){return this.state.keyExchange.getKeyInfo()}keyCheck(){var e,t;null===(t=(e=this).state.socket)||void 0===t||t.emit(S.MESSAGE,{id:e.state.channelId,context:e.state.context,message:{type:k.KEY_HANDSHAKE_CHECK,pubkey:e.getKeyInfo().ecies.otherPubKey}})}getKeyExchange(){return this.state.keyExchange}sendMessage(e){return T(this,e)}ping(){return(e=this).state.debug&&console.debug(`SocketService::${e.state.context}::ping() originator=${e.state.isOriginator} keysExchanged=${null===(t=e.state.keyExchange)||void 0===t?void 0:t.areKeysExchanged()}`),e.state.isOriginator&&((null===(n=e.state.keyExchange)||void 0===n?void 0:n.areKeysExchanged())?(console.warn(`SocketService::${e.state.context}::ping() sending READY message`),e.sendMessage({type:b.READY})):(console.warn(`SocketService::${e.state.context}::ping() starting key exchange`),null===(o=e.state.keyExchange)||void 0===o||o.start({isOriginator:null!==(i=e.state.isOriginator)&&void 0!==i&&i}))),void(null===(s=e.state.socket)||void 0===s||s.emit(S.MESSAGE,{id:e.state.channelId,context:e.state.context,message:{type:b.PING}}));var e,t,n,o,i,s}pause(){return(e=this).state.debug&&console.debug(`SocketService::${e.state.context}::pause()`),e.state.manualDisconnect=!0,(null===(t=e.state.keyExchange)||void 0===t?void 0:t.areKeysExchanged())&&e.sendMessage({type:b.PAUSE}),void(null===(n=e.state.socket)||void 0===n||n.disconnect());var e,t,n}isConnected(){var e;return null===(e=this.state.socket)||void 0===e?void 0:e.connected}resume(){return(e=this).state.debug&&console.debug(`SocketService::${e.state.context}::resume() connected=${null===(t=e.state.socket)||void 0===t?void 0:t.connected} manualDisconnect=${e.state.manualDisconnect} resumed=${e.state.resumed} keysExchanged=${null===(n=e.state.keyExchange)||void 0===n?void 0:n.areKeysExchanged()}`),(null===(o=e.state.socket)||void 0===o?void 0:o.connected)?e.state.debug&&console.debug("SocketService::resume() already connected."):(null===(i=e.state.socket)||void 0===i||i.connect(),e.state.debug&&console.debug(`SocketService::resume() after connecting socket --\x3e connected=${null===(s=e.state.socket)||void 0===s?void 0:s.connected}`),null===(a=e.state.socket)||void 0===a||a.emit(S.JOIN_CHANNEL,e.state.channelId,`${e.state.context}_resume`)),(null===(c=e.state.keyExchange)||void 0===c?void 0:c.areKeysExchanged())?e.state.isOriginator||e.sendMessage({type:b.READY}):e.state.isOriginator||null===(r=e.state.keyExchange)||void 0===r||r.start({isOriginator:null!==(d=e.state.isOriginator)&&void 0!==d&&d}),e.state.manualDisconnect=!1,void(e.state.resumed=!0);var e,t,n,o,i,s,a,c,r,d}getRPCMethodTracker(){return this.state.rpcMethodTracker}disconnect(e){return function(e,t){var n,o;e.state.debug&&console.debug(`SocketService::${e.state.context}::disconnect()`,t),(null==t?void 0:t.terminate)&&(e.state.channelId=t.channelId,null===(n=e.state.keyExchange)||void 0===n||n.clean()),e.state.rpcMethodTracker={},e.state.manualDisconnect=!0,null===(o=e.state.socket)||void 0===o||o.disconnect()}(this,e)}}var $,w,R,L;function M(e){return()=>d(this,void 0,void 0,(function*(){var t,n,o;const{state:i}=e;if(i.authorized)return;yield(()=>d(this,void 0,void 0,(function*(){for(;!i.walletInfo;)yield I(500)})))();const s="7.3".localeCompare((null===(t=i.walletInfo)||void 0===t?void 0:t.version)||"");if(i.debug&&console.debug(`RemoteCommunication HACK 'authorized' version=${null===(n=i.walletInfo)||void 0===n?void 0:n.version} compareValue=${s}`),1!==s)return;const a=i.platformType===w.MobileWeb||i.platformType===w.ReactNative||i.platformType===w.MetaMaskMobileWebview;i.debug&&console.debug(`RemoteCommunication HACK 'authorized' platform=${i.platformType} secure=${a} channel=${i.channelId} walletVersion=${null===(o=i.walletInfo)||void 0===o?void 0:o.version}`),a&&(i.authorized=!0,e.emit(S.AUTHORIZED))}))}function H(e){return t=>{const{state:n}=e;n.debug&&console.debug(`RemoteCommunication::${n.context}::on 'channel_created' channelId=${t}`),e.emit(S.CHANNEL_CREATED,t)}}function P(e,t){return()=>{var n,o,i,s;const{state:a}=e;if(a.debug&&console.debug(`RemoteCommunication::on 'clients_connected' channel=${a.channelId} keysExchanged=${null===(o=null===(n=a.communicationLayer)||void 0===n?void 0:n.getKeyInfo())||void 0===o?void 0:o.keysExchanged}`),a.analytics){const e=a.isOriginator?R.REQUEST:R.REQUEST_MOBILE;l(Object.assign(Object.assign({id:null!==(i=a.channelId)&&void 0!==i?i:"",event:a.reconnection?R.RECONNECT:e},a.originatorInfo),{commLayer:t,sdkVersion:a.sdkVersion,walletVersion:null===(s=a.walletInfo)||void 0===s?void 0:s.version,commLayerVersion:g.version}),a.communicationServerUrl).catch((e=>{console.error("Cannot send analytics",e)}))}a.clientsConnected=!0,a.originatorInfoSent=!1,e.emit(S.CLIENTS_CONNECTED)}}function Y(e,t){return n=>{var o;const{state:i}=e;i.debug&&console.debug(`RemoteCommunication::${i.context}]::on 'clients_disconnected' channelId=${n}`),i.clientsConnected=!1,e.emit(S.CLIENTS_DISCONNECTED,i.channelId),e.setConnectionStatus(p.DISCONNECTED),i.ready=!1,i.authorized=!1,i.analytics&&i.channelId&&l({id:i.channelId,event:R.DISCONNECTED,sdkVersion:i.sdkVersion,commLayer:t,commLayerVersion:g.version,walletVersion:null===(o=i.walletInfo)||void 0===o?void 0:o.version},i.communicationServerUrl).catch((e=>{console.error("Cannot send analytics",e)}))}}function U(e){return t=>{var n;const{state:o}=e;if(o.debug&&console.debug(`RemoteCommunication::${o.context}::on 'clients_waiting' numberUsers=${t} ready=${o.ready} autoStarted=${o.originatorConnectStarted}`),e.setConnectionStatus(p.WAITING),e.emit(S.CLIENTS_WAITING,t),o.originatorConnectStarted){o.debug&&console.debug(`RemoteCommunication::on 'clients_waiting' watch autoStarted=${o.originatorConnectStarted} timeout`,o.autoConnectOptions);const t=(null===(n=o.autoConnectOptions)||void 0===n?void 0:n.timeout)||3e3,i=setTimeout((()=>{o.debug&&console.debug(`RemoteCommunication::on setTimeout(${t}) terminate channelConfig`,o.autoConnectOptions),o.originatorConnectStarted=!1,o.ready||e.setConnectionStatus(p.TIMEOUT),clearTimeout(i)}),t)}}}function j(e,t){return n=>{var o,i,s,a,c;const{state:r}=e;r.debug&&console.debug(`RemoteCommunication::${r.context}::on commLayer.'keys_exchanged' channel=${r.channelId}`,n),(null===(i=null===(o=r.communicationLayer)||void 0===o?void 0:o.getKeyInfo())||void 0===i?void 0:i.keysExchanged)&&e.setConnectionStatus(p.LINKED),function(e,t){var n,o,i,s;const{state:a}=e;a.debug&&console.debug(`RemoteCommunication::setLastActiveDate() channel=${a.channelId}`,t);const c={channelId:null!==(n=a.channelId)&&void 0!==n?n:"",validUntil:null!==(i=null===(o=a.channelConfig)||void 0===o?void 0:o.validUntil)&&void 0!==i?i:0,lastActive:t.getTime()};null===(s=a.storageManager)||void 0===s||s.persistChannelConfig(c)}(e,new Date),r.analytics&&r.channelId&&l({id:r.channelId,event:n.isOriginator?R.CONNECTED:R.CONNECTED_MOBILE,sdkVersion:r.sdkVersion,commLayer:t,commLayerVersion:g.version,walletVersion:null===(s=r.walletInfo)||void 0===s?void 0:s.version},r.communicationServerUrl).catch((e=>{console.error("Cannot send analytics",e)})),r.isOriginator=n.isOriginator,n.isOriginator||(null===(a=r.communicationLayer)||void 0===a||a.sendMessage({type:b.READY}),r.ready=!0,r.paused=!1),n.isOriginator&&!r.originatorInfoSent&&(null===(c=r.communicationLayer)||void 0===c||c.sendMessage({type:b.ORIGINATOR_INFO,originatorInfo:r.originatorInfo,originator:r.originatorInfo}),r.originatorInfoSent=!0)}}function G(e,t){const{state:n}=t;if(n.debug&&console.debug(`RemoteCommunication::${n.context}::on 'message' typeof=${typeof e}`,e),t.state.ready=!0,n.isOriginator||e.type!==b.ORIGINATOR_INFO)if(n.isOriginator&&e.type===b.WALLET_INFO)!function(e,t){const{state:n}=e;n.walletInfo=t.walletInfo,n.paused=!1}(t,e);else{if(e.type===b.TERMINATE)!function(e){const{state:t}=e;t.isOriginator&&(J({options:{terminate:!0,sendMessage:!1},instance:e}),console.debug(),e.emit(S.TERMINATE))}(t);else if(e.type===b.PAUSE)!function(e){const{state:t}=e;t.paused=!0,e.setConnectionStatus(p.PAUSED)}(t);else if(e.type===b.READY&&n.isOriginator)!function(e){const{state:t}=e;e.setConnectionStatus(p.LINKED);const n=t.paused;t.paused=!1,e.emit(S.CLIENTS_READY,{isOriginator:t.isOriginator,walletInfo:t.walletInfo}),n&&(t.authorized=!0,e.emit(S.AUTHORIZED))}(t);else{if(e.type===b.OTP&&n.isOriginator)return void function(e,t){var n;const{state:o}=e;e.emit(S.OTP,t.otpAnswer),1==="6.6".localeCompare((null===(n=o.walletInfo)||void 0===n?void 0:n.version)||"")&&(console.warn("RemoteCommunication::on 'otp' -- backward compatibility <6.6 -- triger eth_requestAccounts"),e.emit(S.SDK_RPC_CALL,{method:v.ETH_REQUESTACCOUNTS,params:[]}))}(t,e);e.type===b.AUTHORIZED&&n.isOriginator&&function(e){const{state:t}=e;t.authorized=!0,e.emit(S.AUTHORIZED)}(t)}t.emit(S.MESSAGE,e)}else!function(e,t){var n;const{state:o}=e;null===(n=o.communicationLayer)||void 0===n||n.sendMessage({type:b.WALLET_INFO,walletInfo:o.walletInfo}),o.originatorInfo=t.originatorInfo||t.originator,e.emit(S.CLIENTS_READY,{isOriginator:o.isOriginator,originatorInfo:o.originatorInfo}),o.paused=!1}(t,e)}function z(e,t){var n,o;return d(this,void 0,void 0,(function*(){const{state:i}=e;i.debug&&console.log(`RemoteCommunication::${i.context}::sendMessage paused=${i.paused} ready=${i.ready} authorized=${i.authorized} socket=${null===(n=i.communicationLayer)||void 0===n?void 0:n.isConnected()} clientsConnected=${i.clientsConnected} status=${i._connectionStatus}`,t),!i.paused&&i.ready&&(null===(o=i.communicationLayer)||void 0===o?void 0:o.isConnected())&&i.clientsConnected||(i.debug&&console.log(`RemoteCommunication::${i.context}::sendMessage  SKIP message waiting for MM mobile readiness.`),yield new Promise((t=>{e.once(S.CLIENTS_READY,t)})),i.debug&&console.log(`RemoteCommunication::${i.context}::sendMessage  AFTER SKIP / READY -- sending pending message`));try{yield function(e,t){return d(this,void 0,void 0,(function*(){return new Promise((n=>{var o,i,s,a;const{state:c}=e;if(c.debug&&console.log(`RemoteCommunication::${c.context}::sendMessage::handleAuthorization ready=${c.ready} authorized=${c.authorized} method=${t.method}`),1==="7.3".localeCompare((null===(o=c.walletInfo)||void 0===o?void 0:o.version)||""))return c.debug&&console.debug(`compatibility hack wallet version > ${null===(i=c.walletInfo)||void 0===i?void 0:i.version}`),null===(s=c.communicationLayer)||void 0===s||s.sendMessage(t),void n();!c.isOriginator||c.authorized?(null===(a=c.communicationLayer)||void 0===a||a.sendMessage(t),n()):e.once(S.AUTHORIZED,(()=>{var e;c.debug&&console.log(`RemoteCommunication::${c.context}::sendMessage  AFTER SKIP / AUTHORIZED -- sending pending message`),null===(e=c.communicationLayer)||void 0===e||e.sendMessage(t),n()}))}))}))}(e,t)}catch(e){throw console.error(`RemoteCommunication::${i.context}::sendMessage  ERROR`,e),e}}))}function F(e){return t=>{let n=t;t.message&&(n=n.message),G(n,e)}}function V(e){return()=>{const{state:t}=e;t.debug&&console.debug("RemoteCommunication::on 'socket_reconnect' -- reset key exchange status / set ready to false"),t.ready=!1,y(t)}}function W(e){return()=>{const{state:t}=e;t.debug&&console.debug("RemoteCommunication::on 'socket_Disconnected' set ready to false"),t.ready=!1}}function J({options:e,instance:t}){var n,o,i,s,a,r;const{state:d}=t;d.debug&&console.debug(`RemoteCommunication::disconnect() channel=${d.channelId}`,e),d.ready=!1,d.paused=!1,(null==e?void 0:e.terminate)?(null===(n=d.storageManager)||void 0===n||n.terminate(null!==(o=d.channelId)&&void 0!==o?o:""),(null===(i=d.communicationLayer)||void 0===i?void 0:i.getKeyInfo().keysExchanged)&&(null==e?void 0:e.sendMessage)&&(null===(s=d.communicationLayer)||void 0===s||s.sendMessage({type:b.TERMINATE})),d.channelId=c(),e.channelId=d.channelId,d.channelConfig=void 0,d.originatorConnectStarted=!1,null===(a=d.communicationLayer)||void 0===a||a.disconnect(e),t.setConnectionStatus(p.TERMINATED)):(null===(r=d.communicationLayer)||void 0===r||r.disconnect(e),t.setConnectionStatus(p.DISCONNECTED))}!function(e){e.SOCKET="socket"}($||($={})),function(e){e.NonBrowser="nodejs",e.MetaMaskMobileWebview="in-app-browser",e.DesktopWeb="web-desktop",e.MobileWeb="web-mobile",e.ReactNative="react-native"}(w||(w={})),function(e){e.REQUEST="sdk_connect_request_started",e.REQUEST_MOBILE="sdk_connect_request_started_mobile",e.RECONNECT="sdk_reconnect_request_started",e.CONNECTED="sdk_connection_established",e.CONNECTED_MOBILE="sdk_connection_established_mobile",e.AUTHORIZED="sdk_connection_authorized",e.REJECTED="sdk_connection_rejected",e.TERMINATED="sdk_connection_terminated",e.DISCONNECTED="sdk_disconnected",e.SDK_USE_EXTENSION="sdk_use_extension",e.SDK_EXTENSION_UTILIZED="sdk_extension_utilized",e.SDK_USE_INAPP_BROWSER="sdk_use_inapp_browser"}(R||(R={}));class X extends s{constructor({platformType:e,communicationLayerPreference:t,otherPublicKey:n,reconnect:o,walletInfo:i,dappMetadata:s,transports:a,context:c,ecies:r,analytics:d=!1,storage:l,sdkVersion:u,communicationServerUrl:g=h,logging:m,autoConnect:v={timeout:3e3}}){super(),this.state={ready:!1,authorized:!1,isOriginator:!1,paused:!1,platformType:"metamask-mobile",analytics:!1,reconnection:!1,originatorInfoSent:!1,communicationServerUrl:h,context:"",clientsConnected:!1,sessionDuration:E,originatorConnectStarted:!1,debug:!1,_connectionStatus:p.DISCONNECTED},this.state.otherPublicKey=n,this.state.dappMetadata=s,this.state.walletInfo=i,this.state.transports=a,this.state.platformType=e,this.state.analytics=d,this.state.isOriginator=!n,this.state.communicationServerUrl=g,this.state.context=c,this.state.sdkVersion=u,this.setMaxListeners(50),this.setConnectionStatus(p.DISCONNECTED),(null==l?void 0:l.duration)&&(this.state.sessionDuration=E),this.state.storageOptions=l,this.state.autoConnectOptions=v,this.state.debug=!0===(null==m?void 0:m.remoteLayer),this.state.logging=m,(null==l?void 0:l.storageManager)&&(this.state.storageManager=l.storageManager),this.initCommunicationLayer({communicationLayerPreference:t,otherPublicKey:n,reconnect:o,ecies:r,communicationServerUrl:g}),this.emitServiceStatusEvent()}initCommunicationLayer({communicationLayerPreference:e,otherPublicKey:t,reconnect:n,ecies:o,communicationServerUrl:i=h}){return function({communicationLayerPreference:e,otherPublicKey:t,reconnect:n,ecies:o,communicationServerUrl:i=h,instance:s}){var a,c,r;const{state:d}=s;if(e!==$.SOCKET)throw new Error("Invalid communication protocol");d.communicationLayer=new D({communicationLayerPreference:e,otherPublicKey:t,reconnect:n,transports:d.transports,communicationServerUrl:i,context:d.context,ecies:o,logging:d.logging});let l="undefined"!=typeof document&&document.URL||"",u="undefined"!=typeof document&&document.title||"";(null===(a=d.dappMetadata)||void 0===a?void 0:a.url)&&(l=d.dappMetadata.url),(null===(c=d.dappMetadata)||void 0===c?void 0:c.name)&&(u=d.dappMetadata.name);const m={url:l,title:u,source:null===(r=d.dappMetadata)||void 0===r?void 0:r.source,platform:d.platformType,apiVersion:g.version};d.originatorInfo=m;const E={[S.AUTHORIZED]:M(s),[S.MESSAGE]:F(s),[S.CLIENTS_CONNECTED]:P(s,e),[S.KEYS_EXCHANGED]:j(s,e),[S.SOCKET_DISCONNECTED]:W(s),[S.SOCKET_RECONNECT]:V(s),[S.CLIENTS_DISCONNECTED]:Y(s,e),[S.CHANNEL_CREATED]:H(s),[S.CLIENTS_WAITING]:U(s),[S.RPC_UPDATE]:()=>{s.emit(S.RPC_UPDATE)}};for(const[e,t]of Object.entries(E))try{d.communicationLayer.on(e,t)}catch(t){console.error(`Error registering handler for ${e}:`,t)}}({communicationLayerPreference:e,otherPublicKey:t,reconnect:n,ecies:o,communicationServerUrl:i,instance:this})}originatorSessionConnect(){return d(this,void 0,void 0,(function*(){return yield function(e){var t,n,o;return d(this,void 0,void 0,(function*(){const{state:i}=e;if(!i.storageManager)return void(i.debug&&console.debug("RemoteCommunication::connect() no storage manager defined - skip"));const s=yield i.storageManager.getPersistedChannelConfig(null!==(t=i.channelId)&&void 0!==t?t:"");if(i.debug&&console.debug(`RemoteCommunication::connect() autoStarted=${i.originatorConnectStarted} channelConfig`,s),null===(n=i.communicationLayer)||void 0===n?void 0:n.isConnected())return i.debug&&console.debug("RemoteCommunication::connect() socket already connected - skip"),s;if(s){if(s.validUntil>Date.now())return i.channelConfig=s,i.originatorConnectStarted=!0,i.channelId=null==s?void 0:s.channelId,i.reconnection=!0,null===(o=i.communicationLayer)||void 0===o||o.connectToChannel({channelId:s.channelId,isOriginator:!0}),s;i.debug&&console.log("RemoteCommunication::autoConnect Session has expired")}i.originatorConnectStarted=!1}))}(this)}))}generateChannelIdConnect(){return d(this,void 0,void 0,(function*(){return function(e){var t,n,o,i,s;if(!e.communicationLayer)throw new Error("communication layer not initialized");if(e.ready)throw new Error("Channel already connected");if(e.channelId&&(null===(t=e.communicationLayer)||void 0===t?void 0:t.isConnected()))return console.warn("Channel already exists -- interrupt generateChannelId",e.channelConfig),e.channelConfig={channelId:e.channelId,validUntil:Date.now()+e.sessionDuration},null===(n=e.storageManager)||void 0===n||n.persistChannelConfig(e.channelConfig),{channelId:e.channelId,pubKey:null===(i=null===(o=e.communicationLayer)||void 0===o?void 0:o.getKeyInfo())||void 0===i?void 0:i.ecies.public};e.debug&&console.debug("RemoteCommunication::generateChannelId()"),y(e);const a=e.communicationLayer.createChannel();e.debug&&console.debug("RemoteCommunication::generateChannelId() channel created",a);const c={channelId:a.channelId,validUntil:Date.now()+e.sessionDuration};return e.channelId=a.channelId,e.channelConfig=c,null===(s=e.storageManager)||void 0===s||s.persistChannelConfig(c),{channelId:e.channelId,pubKey:a.pubKey}}(this.state)}))}clean(){return y(this.state)}connectToChannel(e,t){return function({channelId:e,withKeyExchange:t,state:n}){var o,i,s;if(!a(e))throw console.debug(`RemoteCommunication::${n.context}::connectToChannel() invalid channel channelId=${e}`),new Error(`Invalid channel ${e}`);if(n.debug&&console.debug(`RemoteCommunication::${n.context}::connectToChannel() channelId=${e}`),null===(o=n.communicationLayer)||void 0===o?void 0:o.isConnected())return void console.debug(`RemoteCommunication::${n.context}::connectToChannel() already connected - interrup connection.`);n.channelId=e,null===(i=n.communicationLayer)||void 0===i||i.connectToChannel({channelId:e,withKeyExchange:t});const c={channelId:e,validUntil:Date.now()+n.sessionDuration};n.channelConfig=c,null===(s=n.storageManager)||void 0===s||s.persistChannelConfig(c)}({channelId:e,withKeyExchange:t,state:this.state})}sendMessage(e){return z(this,e)}testStorage(){return d(this,void 0,void 0,(function*(){return function(e){var t,n;return d(this,void 0,void 0,(function*(){const o=yield null===(t=e.storageManager)||void 0===t?void 0:t.getPersistedChannelConfig(null!==(n=e.channelId)&&void 0!==n?n:"");console.debug("RemoteCommunication.testStorage() res",o)}))}(this.state)}))}getChannelConfig(){return this.state.channelConfig}isReady(){return this.state.ready}isConnected(){var e;return null===(e=this.state.communicationLayer)||void 0===e?void 0:e.isConnected()}isAuthorized(){return this.state.authorized}isPaused(){return this.state.paused}getCommunicationLayer(){return this.state.communicationLayer}ping(){var e;this.state.debug&&console.debug(`RemoteCommunication::ping() channel=${this.state.channelId}`),null===(e=this.state.communicationLayer)||void 0===e||e.ping()}keyCheck(){var e;this.state.debug&&console.debug(`RemoteCommunication::keyCheck() channel=${this.state.channelId}`),null===(e=this.state.communicationLayer)||void 0===e||e.keyCheck()}setConnectionStatus(e){this.state._connectionStatus!==e&&(this.state._connectionStatus=e,this.emit(S.CONNECTION_STATUS,e),this.emitServiceStatusEvent())}emitServiceStatusEvent(){this.emit(S.SERVICE_STATUS,this.getServiceStatus())}getConnectionStatus(){return this.state._connectionStatus}getServiceStatus(){return{originatorInfo:this.state.originatorInfo,keyInfo:this.getKeyInfo(),connectionStatus:this.state._connectionStatus,channelConfig:this.state.channelConfig,channelId:this.state.channelId}}getKeyInfo(){var e;return null===(e=this.state.communicationLayer)||void 0===e?void 0:e.getKeyInfo()}resetKeys(){var e;null===(e=this.state.communicationLayer)||void 0===e||e.resetKeys()}setOtherPublicKey(e){var t;const n=null===(t=this.state.communicationLayer)||void 0===t?void 0:t.getKeyExchange();if(!n)throw new Error("KeyExchange is not initialized.");n.getOtherPublicKey()!==e&&n.setOtherPublicKey(e)}pause(){var e;this.state.debug&&console.debug(`RemoteCommunication::pause() channel=${this.state.channelId}`),null===(e=this.state.communicationLayer)||void 0===e||e.pause(),this.setConnectionStatus(p.PAUSED)}getVersion(){return g.version}resume(){return function(e){var t;const{state:n}=e;n.debug&&console.debug(`RemoteCommunication::resume() channel=${n.channelId}`),null===(t=n.communicationLayer)||void 0===t||t.resume(),e.setConnectionStatus(p.LINKED)}(this)}getChannelId(){return this.state.channelId}getRPCMethodTracker(){var e;return null===(e=this.state.communicationLayer)||void 0===e?void 0:e.getRPCMethodTracker()}disconnect(e){return J({options:e,instance:this})}}!function(e){e.RENEW="renew",e.LINK="link"}(L||(L={}));export{L as AutoConnectType,$ as CommunicationLayerPreference,p as ConnectionStatus,h as DEFAULT_SERVER_URL,u as ECIES,S as EventType,b as MessageType,w as PlatformType,X as RemoteCommunication,l as SendAnalytics,D as SocketService,R as TrackingEvents};
//# sourceMappingURL=metamask-sdk-communication-layer.js.map
