{
  "version": 3,
  "sources": ["../../svg-injector/svg-injector.js"],
  "sourcesContent": ["/**\n * SVGInjector v1.1.3 - Fast, caching, dynamic inline SVG DOM injection library\n * https://github.com/iconic/SVGInjector\n *\n * Copyright (c) 2014-2015 Waybury <hello@waybury.com>\n * @license MIT\n */\n\n(function (window, document) {\n\n  'use strict';\n\n  // Environment\n  var isLocal = window.location.protocol === 'file:';\n  var hasSvgSupport = document.implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');\n\n  function uniqueClasses(list) {\n    list = list.split(' ');\n\n    var hash = {};\n    var i = list.length;\n    var out = [];\n\n    while (i--) {\n      if (!hash.hasOwnProperty(list[i])) {\n        hash[list[i]] = 1;\n        out.unshift(list[i]);\n      }\n    }\n\n    return out.join(' ');\n  }\n\n  /**\n   * cache (or polyfill for <= IE8) Array.forEach()\n   * source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\n   */\n  var forEach = Array.prototype.forEach || function (fn, scope) {\n    if (this === void 0 || this === null || typeof fn !== 'function') {\n      throw new TypeError();\n    }\n\n    /* jshint bitwise: false */\n    var i, len = this.length >>> 0;\n    /* jshint bitwise: true */\n\n    for (i = 0; i < len; ++i) {\n      if (i in this) {\n        fn.call(scope, this[i], i, this);\n      }\n    }\n  };\n\n  // SVG Cache\n  var svgCache = {};\n\n  var injectCount = 0;\n  var injectedElements = [];\n\n  // Request Queue\n  var requestQueue = [];\n\n  // Script running status\n  var ranScripts = {};\n\n  var cloneSvg = function (sourceSvg) {\n    return sourceSvg.cloneNode(true);\n  };\n\n  var queueRequest = function (url, callback) {\n    requestQueue[url] = requestQueue[url] || [];\n    requestQueue[url].push(callback);\n  };\n\n  var processRequestQueue = function (url) {\n    for (var i = 0, len = requestQueue[url].length; i < len; i++) {\n      // Make these calls async so we avoid blocking the page/renderer\n      /* jshint loopfunc: true */\n      (function (index) {\n        setTimeout(function () {\n          requestQueue[url][index](cloneSvg(svgCache[url]));\n        }, 0);\n      })(i);\n      /* jshint loopfunc: false */\n    }\n  };\n\n  var loadSvg = function (url, callback) {\n    if (svgCache[url] !== undefined) {\n      if (svgCache[url] instanceof SVGSVGElement) {\n        // We already have it in cache, so use it\n        callback(cloneSvg(svgCache[url]));\n      }\n      else {\n        // We don't have it in cache yet, but we are loading it, so queue this request\n        queueRequest(url, callback);\n      }\n    }\n    else {\n\n      if (!window.XMLHttpRequest) {\n        callback('Browser does not support XMLHttpRequest');\n        return false;\n      }\n\n      // Seed the cache to indicate we are loading this URL already\n      svgCache[url] = {};\n      queueRequest(url, callback);\n\n      var httpRequest = new XMLHttpRequest();\n\n      httpRequest.onreadystatechange = function () {\n        // readyState 4 = complete\n        if (httpRequest.readyState === 4) {\n\n          // Handle status\n          if (httpRequest.status === 404 || httpRequest.responseXML === null) {\n            callback('Unable to load SVG file: ' + url);\n\n            if (isLocal) callback('Note: SVG injection ajax calls do not work locally without adjusting security setting in your browser. Or consider using a local webserver.');\n\n            callback();\n            return false;\n          }\n\n          // 200 success from server, or 0 when using file:// protocol locally\n          if (httpRequest.status === 200 || (isLocal && httpRequest.status === 0)) {\n\n            /* globals Document */\n            if (httpRequest.responseXML instanceof Document) {\n              // Cache it\n              svgCache[url] = httpRequest.responseXML.documentElement;\n            }\n            /* globals -Document */\n\n            // IE9 doesn't create a responseXML Document object from loaded SVG,\n            // and throws a \"DOM Exception: HIERARCHY_REQUEST_ERR (3)\" error when injected.\n            //\n            // So, we'll just create our own manually via the DOMParser using\n            // the the raw XML responseText.\n            //\n            // :NOTE: IE8 and older doesn't have DOMParser, but they can't do SVG either, so...\n            else if (DOMParser && (DOMParser instanceof Function)) {\n              var xmlDoc;\n              try {\n                var parser = new DOMParser();\n                xmlDoc = parser.parseFromString(httpRequest.responseText, 'text/xml');\n              }\n              catch (e) {\n                xmlDoc = undefined;\n              }\n\n              if (!xmlDoc || xmlDoc.getElementsByTagName('parsererror').length) {\n                callback('Unable to parse SVG file: ' + url);\n                return false;\n              }\n              else {\n                // Cache it\n                svgCache[url] = xmlDoc.documentElement;\n              }\n            }\n\n            // We've loaded a new asset, so process any requests waiting for it\n            processRequestQueue(url);\n          }\n          else {\n            callback('There was a problem injecting the SVG: ' + httpRequest.status + ' ' + httpRequest.statusText);\n            return false;\n          }\n        }\n      };\n\n      httpRequest.open('GET', url);\n\n      // Treat and parse the response as XML, even if the\n      // server sends us a different mimetype\n      if (httpRequest.overrideMimeType) httpRequest.overrideMimeType('text/xml');\n\n      httpRequest.send();\n    }\n  };\n\n  // Inject a single element\n  var injectElement = function (el, evalScripts, pngFallback, callback) {\n\n    // Grab the src or data-src attribute\n    var imgUrl = el.getAttribute('data-src') || el.getAttribute('src');\n\n    // We can only inject SVG\n    if (!(/\\.svg/i).test(imgUrl)) {\n      callback('Attempted to inject a file with a non-svg extension: ' + imgUrl);\n      return;\n    }\n\n    // If we don't have SVG support try to fall back to a png,\n    // either defined per-element via data-fallback or data-png,\n    // or globally via the pngFallback directory setting\n    if (!hasSvgSupport) {\n      var perElementFallback = el.getAttribute('data-fallback') || el.getAttribute('data-png');\n\n      // Per-element specific PNG fallback defined, so use that\n      if (perElementFallback) {\n        el.setAttribute('src', perElementFallback);\n        callback(null);\n      }\n      // Global PNG fallback directoriy defined, use the same-named PNG\n      else if (pngFallback) {\n        el.setAttribute('src', pngFallback + '/' + imgUrl.split('/').pop().replace('.svg', '.png'));\n        callback(null);\n      }\n      // um...\n      else {\n        callback('This browser does not support SVG and no PNG fallback was defined.');\n      }\n\n      return;\n    }\n\n    // Make sure we aren't already in the process of injecting this element to\n    // avoid a race condition if multiple injections for the same element are run.\n    // :NOTE: Using indexOf() only _after_ we check for SVG support and bail,\n    // so no need for IE8 indexOf() polyfill\n    if (injectedElements.indexOf(el) !== -1) {\n      return;\n    }\n\n    // Remember the request to inject this element, in case other injection\n    // calls are also trying to replace this element before we finish\n    injectedElements.push(el);\n\n    // Try to avoid loading the orginal image src if possible.\n    el.setAttribute('src', '');\n\n    // Load it up\n    loadSvg(imgUrl, function (svg) {\n\n      if (typeof svg === 'undefined' || typeof svg === 'string') {\n        callback(svg);\n        return false;\n      }\n\n      var imgId = el.getAttribute('id');\n      if (imgId) {\n        svg.setAttribute('id', imgId);\n      }\n\n      var imgTitle = el.getAttribute('title');\n      if (imgTitle) {\n        svg.setAttribute('title', imgTitle);\n      }\n\n      // Concat the SVG classes + 'injected-svg' + the img classes\n      var classMerge = [].concat(svg.getAttribute('class') || [], 'injected-svg', el.getAttribute('class') || []).join(' ');\n      svg.setAttribute('class', uniqueClasses(classMerge));\n\n      var imgStyle = el.getAttribute('style');\n      if (imgStyle) {\n        svg.setAttribute('style', imgStyle);\n      }\n\n      // Copy all the data elements to the svg\n      var imgData = [].filter.call(el.attributes, function (at) {\n        return (/^data-\\w[\\w\\-]*$/).test(at.name);\n      });\n      forEach.call(imgData, function (dataAttr) {\n        if (dataAttr.name && dataAttr.value) {\n          svg.setAttribute(dataAttr.name, dataAttr.value);\n        }\n      });\n\n      // Make sure any internally referenced clipPath ids and their\n      // clip-path references are unique.\n      //\n      // This addresses the issue of having multiple instances of the\n      // same SVG on a page and only the first clipPath id is referenced.\n      //\n      // Browsers often shortcut the SVG Spec and don't use clipPaths\n      // contained in parent elements that are hidden, so if you hide the first\n      // SVG instance on the page, then all other instances lose their clipping.\n      // Reference: https://bugzilla.mozilla.org/show_bug.cgi?id=376027\n\n      // Handle all defs elements that have iri capable attributes as defined by w3c: http://www.w3.org/TR/SVG/linking.html#processingIRI\n      // Mapping IRI addressable elements to the properties that can reference them:\n      var iriElementsAndProperties = {\n        'clipPath': ['clip-path'],\n        'color-profile': ['color-profile'],\n        'cursor': ['cursor'],\n        'filter': ['filter'],\n        'linearGradient': ['fill', 'stroke'],\n        'marker': ['marker', 'marker-start', 'marker-mid', 'marker-end'],\n        'mask': ['mask'],\n        'pattern': ['fill', 'stroke'],\n        'radialGradient': ['fill', 'stroke']\n      };\n\n      var element, elementDefs, properties, currentId, newId;\n      Object.keys(iriElementsAndProperties).forEach(function (key) {\n        element = key;\n        properties = iriElementsAndProperties[key];\n\n        elementDefs = svg.querySelectorAll('defs ' + element + '[id]');\n        for (var i = 0, elementsLen = elementDefs.length; i < elementsLen; i++) {\n          currentId = elementDefs[i].id;\n          newId = currentId + '-' + injectCount;\n\n          // All of the properties that can reference this element type\n          var referencingElements;\n          forEach.call(properties, function (property) {\n            // :NOTE: using a substring match attr selector here to deal with IE \"adding extra quotes in url() attrs\"\n            referencingElements = svg.querySelectorAll('[' + property + '*=\"' + currentId + '\"]');\n            for (var j = 0, referencingElementLen = referencingElements.length; j < referencingElementLen; j++) {\n              referencingElements[j].setAttribute(property, 'url(#' + newId + ')');\n            }\n          });\n\n          elementDefs[i].id = newId;\n        }\n      });\n\n      // Remove any unwanted/invalid namespaces that might have been added by SVG editing tools\n      svg.removeAttribute('xmlns:a');\n\n      // Post page load injected SVGs don't automatically have their script\n      // elements run, so we'll need to make that happen, if requested\n\n      // Find then prune the scripts\n      var scripts = svg.querySelectorAll('script');\n      var scriptsToEval = [];\n      var script, scriptType;\n\n      for (var k = 0, scriptsLen = scripts.length; k < scriptsLen; k++) {\n        scriptType = scripts[k].getAttribute('type');\n\n        // Only process javascript types.\n        // SVG defaults to 'application/ecmascript' for unset types\n        if (!scriptType || scriptType === 'application/ecmascript' || scriptType === 'application/javascript') {\n\n          // innerText for IE, textContent for other browsers\n          script = scripts[k].innerText || scripts[k].textContent;\n\n          // Stash\n          scriptsToEval.push(script);\n\n          // Tidy up and remove the script element since we don't need it anymore\n          svg.removeChild(scripts[k]);\n        }\n      }\n\n      // Run/Eval the scripts if needed\n      if (scriptsToEval.length > 0 && (evalScripts === 'always' || (evalScripts === 'once' && !ranScripts[imgUrl]))) {\n        for (var l = 0, scriptsToEvalLen = scriptsToEval.length; l < scriptsToEvalLen; l++) {\n\n          // :NOTE: Yup, this is a form of eval, but it is being used to eval code\n          // the caller has explictely asked to be loaded, and the code is in a caller\n          // defined SVG file... not raw user input.\n          //\n          // Also, the code is evaluated in a closure and not in the global scope.\n          // If you need to put something in global scope, use 'window'\n          new Function(scriptsToEval[l])(window); // jshint ignore:line\n        }\n\n        // Remember we already ran scripts for this svg\n        ranScripts[imgUrl] = true;\n      }\n\n      // :WORKAROUND:\n      // IE doesn't evaluate <style> tags in SVGs that are dynamically added to the page.\n      // This trick will trigger IE to read and use any existing SVG <style> tags.\n      //\n      // Reference: https://github.com/iconic/SVGInjector/issues/23\n      var styleTags = svg.querySelectorAll('style');\n      forEach.call(styleTags, function (styleTag) {\n        styleTag.textContent += '';\n      });\n\n      // Replace the image with the svg\n      el.parentNode.replaceChild(svg, el);\n\n      // Now that we no longer need it, drop references\n      // to the original element so it can be GC'd\n      delete injectedElements[injectedElements.indexOf(el)];\n      el = null;\n\n      // Increment the injected count\n      injectCount++;\n\n      callback(svg);\n    });\n  };\n\n  /**\n   * SVGInjector\n   *\n   * Replace the given elements with their full inline SVG DOM elements.\n   *\n   * :NOTE: We are using get/setAttribute with SVG because the SVG DOM spec differs from HTML DOM and\n   * can return other unexpected object types when trying to directly access svg properties.\n   * ex: \"className\" returns a SVGAnimatedString with the class value found in the \"baseVal\" property,\n   * instead of simple string like with HTML Elements.\n   *\n   * @param {mixes} Array of or single DOM element\n   * @param {object} options\n   * @param {function} callback\n   * @return {object} Instance of SVGInjector\n   */\n  var SVGInjector = function (elements, options, done) {\n\n    // Options & defaults\n    options = options || {};\n\n    // Should we run the scripts blocks found in the SVG\n    // 'always' - Run them every time\n    // 'once' - Only run scripts once for each SVG\n    // [false|'never'] - Ignore scripts\n    var evalScripts = options.evalScripts || 'always';\n\n    // Location of fallback pngs, if desired\n    var pngFallback = options.pngFallback || false;\n\n    // Callback to run during each SVG injection, returning the SVG injected\n    var eachCallback = options.each;\n\n    // Do the injection...\n    if (elements.length !== undefined) {\n      var elementsLoaded = 0;\n      forEach.call(elements, function (element) {\n        injectElement(element, evalScripts, pngFallback, function (svg) {\n          if (eachCallback && typeof eachCallback === 'function') eachCallback(svg);\n          if (done && elements.length === ++elementsLoaded) done(elementsLoaded);\n        });\n      });\n    }\n    else {\n      if (elements) {\n        injectElement(elements, evalScripts, pngFallback, function (svg) {\n          if (eachCallback && typeof eachCallback === 'function') eachCallback(svg);\n          if (done) done(1);\n          elements = null;\n        });\n      }\n      else {\n        if (done) done(0);\n      }\n    }\n  };\n\n  /* global module, exports: true, define */\n  // Node.js or CommonJS\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = exports = SVGInjector;\n  }\n  // AMD support\n  else if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return SVGInjector;\n    });\n  }\n  // Otherwise, attach to window as global\n  else if (typeof window === 'object') {\n    window.SVGInjector = SVGInjector;\n  }\n  /* global -module, -exports, -define */\n\n}(window, document));\n"],
  "mappings": "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",
  "names": ["window", "document"]
}
